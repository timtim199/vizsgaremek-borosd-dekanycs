@page "/iam/user-management"
@using vetcms.BrowserPresentation.Components
@using vetcms.BrowserPresentation.Utility
@using vetcms.ClientApplication.Common.CommandAbstraction
@using vetcms.ClientApplication.Features.IAM.CreateNewUser
@using vetcms.ClientApplication.Features.IAM.DeleteUser
@using vetcms.ClientApplication.Features.IAM.ModifyUser
@using vetcms.ClientApplication.Features.IAM.UserList
@using vetcms.SharedModels.Common.Dto
@inject IDialogService DialogService
@inject IToastService ToastService;
@inject MediatR.IMediator Mediator

<div>
    
</div>
<FluentCard style="overflow:auto;">
    <FluentGrid >
        <FluentGridItem xs="12">
            <FluentToolbar id="toolbar-fluent-components" style="width:100%">
                <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_ASSIGN_PERMISSIONS]">
                    <FluentButton Disabled="isBusy" @onclick="@OpenCreateUserDialog" style="padding-bottom: 5px;" IconStart="@(new Icons.Regular.Size16.PersonAdd())" Appearance="Appearance.Accent">Új felhasználó</FluentButton>
                </PermissionWrapper>
                <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_ASSIGN_PERMISSIONS]">
                    <FluentButton Disabled="isBusy" @onclick="@DeleteUsers" style="padding-bottom: 5px;" IconStart="@(new Icons.Regular.Size16.PersonDelete())" Appearance="Appearance.Accent">Törlés</FluentButton>
                </PermissionWrapper>
                <div slot="end">
                    <FluentSearch Disabled="isBusy" @bind-Value=searchValue AutoComplete="off"/>
                </div>
            </FluentToolbar>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentDataGrid
            Virtualize="true"
            ItemsProvider="personProvider"
            GenerateHeader="GenerateHeaderOption.Sticky"
            Style="min-width: max-content;"
            Pagination="@pagination"
            >
                <SelectColumn TGridItem="SelectableUserDto"
                                SelectMode="DataGridSelectMode.Multiple"
                                SelectFromEntireRow="false"
                                OnSelect="@(e => e.Item.Selected = e.Selected)"
                                SelectAllDisabled="true"
                                @bind-SelectedItems="selectedUsers" />
                <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
                <PropertyColumn Property="@(p => p.VisibleName)" Sortable="true" />
                <PropertyColumn Property="@(p => p.Email)" Sortable="true" />
                <PropertyColumn Property="@(p => p.Address)" Sortable="true" />
                <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" />
                <PropertyColumn Property="@(p => p.LastName)" Sortable="true" />
                <PropertyColumn Property="@(p => p.DateOfBirth)" Format="yyyy-MM-dd" Sortable="true" />

                <TemplateColumn Title="Actions" Align="@Align.End">
                    <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_EDIT_OTHER_USERS]">
                        <FluentButton Disabled="isBusy" aria-label="Szerkesztés" OnClick="@(async ()=> await OpenEditUserDialog(context))" IconStart="@(new Icons.Regular.Size16.Edit())" />
                    </PermissionWrapper>
                    <PermissionWrapper RequiredPermissions="[PermissionFlags.CAN_VIEW_OTHERS_ANIMALS]">
                        <FluentButton Disabled="isBusy" OnClick="@(() => Console.WriteLine("Delete clicked"))" aria-label="Hozzárendelt páciensek megtekintése" IconStart="@(new Icons.Regular.Size16.AnimalCat())"/>
                    </PermissionWrapper>
                </TemplateColumn>
            </FluentDataGrid>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentPaginator State="@pagination" />
        </FluentGridItem>
    </FluentGrid>
</FluentCard>

@code {
    private string searchValue = "one";
    GridItemsProvider<SelectableUserDto> personProvider = default!;
    bool isBusy = false;
    PaginationState pagination = new PaginationState { ItemsPerPage = 25 };
    IEnumerable<SelectableUserDto>? selectedUsers = new List<SelectableUserDto>();

    private class SelectableUserDto : UserDto
    {
        public bool Selected { get; set; } = false;
    }

    protected override async Task OnInitializedAsync()
    {
        personProvider = gridItemsProviderResult;

    }

    private async ValueTask<GridItemsProviderResult<SelectableUserDto>> gridItemsProviderResult(GridItemsProviderRequest<SelectableUserDto> req)
    {
        var query = new UserListClientQuery()
            {
                SearchQuery = searchValue,
                Skip = req.StartIndex,
                Take = req.Count.HasValue ? req.Count.Value : 10
            };

        var data = await ToastService.ShowIndeterminateProgressToast(Mediator.Send(query), "Kérjük várjon...", "Felhasználók betöltése folyamatban...");

        List<SelectableUserDto> users = data.UserQueryResult.Select(u => new SelectableUserDto
            {
                Id = u.Id,
                VisibleName = u.VisibleName,
                Email = u.Email,
                Address = u.Address,
                FirstName = u.FirstName,
                LastName = u.LastName,
                DateOfBirth = u.DateOfBirth
            }).ToList();

        selectedUsers = new List<SelectableUserDto>();

        return GridItemsProviderResult.From(
            items: users,
            totalItemCount: data.ResultCount);
    }

    public async Task DeleteUsers()
    {
        if(!selectedUsers.Any())
        {
            DialogService.ShowError("Nincsenek elemek kijelölve!");
            return;
        }
        isBusy = true;
        var dialog = await DialogService.ShowConfirmationAsync("Biztosan el szeretnéd távolítani a felhasználókat?");
        var result = await dialog.Result;
        bool canceled = result.Cancelled;

        DeleteUserClientCommand command = new DeleteUserClientCommand()
        {
            UserIds = selectedUsers.Select(u => u.Id).ToList()
        };

        if(!canceled)
        {
            await ToastService.ShowIndeterminateProgressToast(Mediator.Send(command), "Kérjük várjon...", "Felhasználók törlése folyamatban...");
        }

        isBusy = false;
    }


    private async Task<DialogResult?> ShowUserDialog(string title, UserDto user)
    {
        DialogParameters parameters = new()
            {
                Title = title,
                PrimaryAction = "Mentés",
                PrimaryActionEnabled = true,
                SecondaryAction = "Mégsem",
                Width = "fit-content",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };
        IDialogReference dialog = await DialogService.ShowDialogAsync<EditUserDialog>(user, parameters);
        DialogResult? result = await dialog.Result;
        return result;
    }


    private async Task OpenCreateUserDialog()
    {
        isBusy = true;
        Console.WriteLine($"Open dialog create user");

        UserDto simpleUser = new UserDto();

        var result = await ShowUserDialog("Új felhasználó létrehozása", simpleUser);

        if (result.Data is not null)
        {
            UserDto? userData = result.Data as UserDto;
            Console.WriteLine($"create user Dialog closed by {userData?.VisibleName} - Canceled: {result.Cancelled}");
            if(!result.Cancelled)
            {
                await ToastService.ShowIndeterminateProgressToast(SubmitNewUserData(userData), "Kérjük várjon...", "Felhasználó adatainak mentése");
            }
        }
        else
        {
            Console.WriteLine($"create user Dialog closed - Canceled: {result.Cancelled}");
        }
        isBusy = false;

    }

    private async Task OpenEditUserDialog(UserDto user)
    {
        isBusy = true;
        int id = user.Id;
        Console.WriteLine($"Open dialog edit user");
        var simpleUser = await ToastService.ShowIndeterminateProgressToast(LoadEditUserData(id), "Kérjük várjon...", "Felhasználó adatainak betöltése");

        var result = await ShowUserDialog("Felhasználó szerkesztése", simpleUser);

        if (result.Data is not null)
        {
            UserDto? editResult = result.Data as UserDto;
            Console.WriteLine($"Edit user Dialog closed by {editResult?.VisibleName} - Canceled: {result.Cancelled}");
            if (!result.Cancelled)
            {
                await ToastService.ShowIndeterminateProgressToast(SubmitEditUserData(editResult), "Kérjük várjon...", "Felhasználó adatainak mentése");
            }
        }
        else
        {
            Console.WriteLine($"Edit user Dialog closed - Canceled: {result.Cancelled}");
        }

        isBusy = false;
    }

    private async Task<UserDto> LoadEditUserData(int id)
    {
        var query = new UserListClientQuery()
        {
            UserId = id,
            Take = 1
        };

        var data = await Mediator.Send(query);

        return data.UserQueryResult.FirstOrDefault();
    }

    private async Task SubmitNewUserData(UserDto newUser)
    {
        CreateNewUserClientCommand command = new CreateNewUserClientCommand()
        {
            NewUserModel = newUser
        };

        await Mediator.Send(command);
    }

    private async Task SubmitEditUserData(UserDto editedUser)
    {
        ModifyUserClientCommand command = new ModifyUserClientCommand()
        {
            UserId = editedUser.Id,
            ModifiedUserDto = editedUser
        };

        await Mediator.Send(command);
    }

    
}